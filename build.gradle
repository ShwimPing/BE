plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.shwimping'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	configureEach {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springAiVersion', "1.0.0-M1")
	set('springCloudVersion', "2023.0.3")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//mongodb
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	//csv 파일
	implementation 'com.opencsv:opencsv:5.5.2'

	//OpenFeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	//ai
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	//QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation "com.querydsl:querydsl-sql-spatial:${dependencyManagement.importedProperties['querydsl.version']}"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	//hibernate spatial
	implementation 'org.hibernate:hibernate-spatial:6.4.1.Final'

	//object storage
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.545'

	//테스트 코드 작성시 사용할 DB(H2)
	runtimeOnly 'com.h2database:h2'

	//jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	//prometheus, actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Firebase
	implementation 'com.google.firebase:firebase-admin'
}

tasks.named('test') {
	useJUnitPlatform()
}

//Querydsl 설정
def generated = 'src/main/generated'

//querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

//자동 생성된 Q클래스 gradle clean으로 제거
clean {
	delete file(generated)
}